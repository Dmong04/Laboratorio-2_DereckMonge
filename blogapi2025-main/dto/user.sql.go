// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package dto

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(name,last_name,email,password,role,created_at,updated_at)
VALUES(?,?,?,?,?,now(),now())
`

type CreateUserParams struct {
	Name     string `json:"name"`
	LastName string `json:"last_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Role,
	)
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, last_name, role, email, password, description, image, created_at, updated_at, remember_token FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LastName,
			&i.Role,
			&i.Email,
			&i.Password,
			&i.Description,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RememberToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, last_name, role, email, password, description, image, created_at, updated_at, remember_token FROM users WHERE email=? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.Description,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RememberToken,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :execresult
UPDATE users SET role = CASE 
WHEN role = 'admin' THEN 'user'
ELSE 'admin'
END
WHERE id = ?
`

func (q *Queries) UpdateRole(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateRole, id)
}
